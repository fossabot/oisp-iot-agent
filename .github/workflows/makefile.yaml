name: End2End Test
on:
  pull_request:
    branches:
      - development
  push:
    branches:
      - development
      - '**-debugtest'
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        repository: Open-IoT-Service-Platform/platform-launcher.git
        ref: 'develop'
        path: platform-launcher
        submodules: recursive
    - name: Setup main repo + subrepos
      shell: bash
      run: |
        export TERM=vt100
        sudo apt install jq
        cd platform-launcher
        make update
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        path: platform-launcher/oisp-iot-agent
    - name: Prepare platform
      shell: bash
      working-directory: platform-launcher
      run: |
        export TERM=vt100
        cd util && \
        bash setup-ubuntu20.04.sh
    - name: Build platform
      working-directory: platform-launcher
      shell: bash
      run: |
        set +o pipefail
        export TERM=vt100
        yes | DOCKER_TAG=test NODOCKERLOGIN=true DEBUG=true make build
    - name: E2E Test
      id: e2etest
      working-directory: platform-launcher
      shell: bash
      run: |
        set +e
        export TERM=vt100
        export PATH=$PATH:/snap/bin
        make import-images DOCKER_TAG=test DEBUG=true
        docker image prune -a -f
        ls | grep "oisp-*" | grep -v oisp-iot-agent | xargs rm -rf
        npm install nodemailer
        export NODOCKERLOGIN=true
        retval=2
        loops=0
        export DOCKER_TAG=test
        export USE_LOCAL_REGISTRY=true
        until [ ${retval} -eq 0 ] || [ ${loops} -gt 3 ]; do
          make undeploy-oisp
          (for i in {1..20}; do sleep 60; echo .; done&) &&  make deploy-oisp-test
          make test-prep-only
          FRONTEND_POD=$(kubectl -n oisp get pods | grep frontend | cut -d " " -f 1)
          EMQX_POD=$(kubectl -n oisp get pods | grep emqx | grep -v emqx-cert | cut -d " " -f 1)
          cd ./oisp-iot-agent
          npm install
          cp ./config/config.json.template ./config/config.json
          tmp=$(mktemp)
          jq ".connector.mqtt.port=1883|.connector.mqtt.secure=false" ./config/config.json > "${tmp}" && mv "${tmp}" ./config/config.json
          node oisp-admin.js initialize
          FRONTEND_POD=$(kubectl -n oisp get pods | grep frontend | cut -d " " -f 1)
          EMQX_POD=$(kubectl -n oisp get pods | grep emqx | grep -v emqx-cert | cut -d " " -f 1)
          kubectl -n oisp port-forward ${FRONTEND_POD} 4001:4001 &>/dev/null &
          kubectl -n oisp port-forward ${EMQX_POD} 1883:1883 &>/dev/null &
          make test
          retval=$?
          cd ..
          loops=$((loops+1))
        done
        echo Agent test return value: ${retval}
        exit ${retval}
    - name: debug with upterm
      if: failure()
      uses: lhotari/action-upterm@v1
